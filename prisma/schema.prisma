generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Location {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  ownerId   String   @map("owner_id")
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rooms     Room[]

  @@map("locations")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  password      String
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  locations     Location[]
  rooms         Room[]
  sessions      Session[]

  @@map("users")
}

model Room {
  id         String   @id @default(cuid())
  name       String?
  ownerId    String   @map("owner_id")
  locationId String   @map("location_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  devices    Device[]
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("rooms")
}

model Device {
  id        String   @id @default(cuid())
  name      String?
  type      String?
  deviceId  String
  roomId    String   @map("room_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
